<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="Macros.KanbanAWMSource" locale="">
  <web>Macros</web>
  <name>KanbanAWMSource</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>xwiki:Macros.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>KanbanAWMSource</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity wiki='false'}}
#if ($xcontext.action == 'get')
  #set($ok = $response.setContentType("application/json"))
  #set($colors = $request.colors.split(','))
  #macro(displayCategories $categories $docLists)
  #set($map = [])
  #foreach($categoryValue in $categories)
       #set($fakedoc = $xwiki.getDocument("XWiki.FakeDocument"))
       #set($fakeobj = $fakedoc.getObject($className, true))
       #set($discard = $fakedoc.use($fakeobj))
       #set($discard = $fakedoc.set($category, $categoryValue))
       #set($scategoryValue = $fakedoc.display($category, "view", $fakeobj).replaceFirst($regextool.quote('{{html clean="false" wiki="false"}}'), '').replaceAll("$regextool.quote('{{/html}}')$", ''))
       #set($items = [])
       #foreach($docname in $docLists.get($categoryValue))
                #set($currentDoc = $xwiki.getDocument($docname))
                #set($surl = $currentDoc.getURL("view"))
                #if($request.title &amp;&amp; $request.title != "")
                 #if($request.title=="title")
                  #set($title = $currentDoc.title)
                 #else
                  #set($stitle = $currentDoc.display($request.title))
                 #end
                #else
                 #set($stitle = $currentDoc.getDisplayTitle())
                #end
                #set($scontent = "")
                #if($request.columns &amp;&amp; $request.columns!="")
                 #set($scontent = "&lt;ul class='card-field-list'&gt;")
                 #foreach($col in $request.columns.split(","))
                  #set($value = $currentDoc.display($col).replaceFirst($regextool.quote('{{html clean="false" wiki="false"}}'), '').replaceAll("$regextool.quote('{{/html}}')$", ''))
                  #set($pname = $currentDoc.displayPrettyName($col))
                  #set($scontent = "${scontent}&lt;li class='card-field'&gt;&lt;span class='card-field-title''&gt;${escapetool.xml($pname)}&lt;/span&gt;&lt;span class='card-field-value'&gt;$value&lt;/span&gt;&lt;/li&gt;")
                 #end
                 #set($scontent = "${scontent}&lt;/ul&gt;")
                #end
                #set ($docid = "$currentDoc.getDocumentReference()")
                #set($itemmap = { "id" : $docid, "title" : $stitle, "url": $surl, "content" : $scontent })
                #set($ok = $items.add($itemmap))
        #end
       #set($color = $listtool.get($colors, $foreach.index).strip())
       #if(!$color)
        #set($color = "blue")
       #end
       #set($ok = $map.add({ "id" : $categoryValue, "title" : $scategoryValue, "color" : "${color}", "item" : $items }))
     #end
  $jsontool.serialize(${map})
  #end
  #if($request.className||$request.app)
  #set($app = $request.app)
  #set($className = $request.className)
  #if(!$className || $className=="")
   #set($appDoc = $xwiki.getDocument("${app}.WebHome"))
   #set($className = $appDoc.getValue("class"))
  #end
  #set($category = $request.category)
  #set($query = "from doc.object(${className}) as obj where doc.fullName not like '%Template'")
  #if ("$!request.displayedCategoryColumns" != '')
    ## Only display a subset of all categories.
    #set ($query = "${query} and obj.${category}=:categoryValue")
    #set ($selectedCategories = $request.displayedCategoryColumns.split(','))
  #end
  #set($xwql = $request.xwql)
  #if($xwql &amp;&amp; $xwql!="")
   #set($query = "${query} and ${xwql}")
  #end
  #set($order = $request.order)
  #if($order &amp;&amp; $order!="")
    #set ($orderFragments = '')
    #foreach ($orderFragment in $order.split(','))
      #set ($orderFragment = $orderFragment.trim())
      #if (!$orderFragment.startsWith('doc'))
        #set ($orderFragment = "obj.$orderFragment")
      #end
      #if ($orderFragments != '')
        #set ($orderFragments = "$orderFragments,$orderFragment")
      #else
        #set ($orderFragments = "$orderFragment")
      #end
    #end
    #set ($query = "${query} order by ${orderFragments}")
  #end
  #set ($categoryField = $xwiki.getDocument($className).getxWikiClass().get($category))
  #set ($categories = $categoryField.getListValues())
  #if ($selectedCategories)
    ## Validate the requested category values:
    ## Remove values not in the set of possible values (if there is such a set).
    ## Remove duplicate values (only leave the first one of each unique value).
    #set ($validatedCategories = [])
    #foreach ($selectedCategory in $selectedCategories)
      #if (
        $categories.contains($selectedCategory) &amp;&amp;
        !$validatedCategories.contains($selectedCategory)
      )
        #set ($discard = $validatedCategories.add($selectedCategory))
      #end
    #end
    #set ($categories = $validatedCategories)
  #end
  #set($categoriesDocs = $util.hashMap)
  #set ($limit = $request.limit)
  #if ("$!limit" == '')
    #set ($limit = 50)
  #end
  #if ($selectedCategories)
    #foreach ($categoryValue in $categories)
      #set ($results = $services.query.xwql($query).bindValue('categoryValue', $categoryValue).setLimit($limit))
      #set ($results = $results.addFilter('document').addFilter('viewable'))
      #set ($results = $results.execute())
      #set ($discard = $categoriesDocs.put($categoryValue, $results))
    #end
  #else
    #set ($results = $services.query.xwql($query).setLimit($limit))
    #set ($results = $results.addFilter('document').addFilter('viewable'))
    #set ($results = $results.execute())
    #foreach ($currentpage in $results)
      #set ($currentdoc = $xwiki.getDocument($currentpage))
      #set ($value = $currentdoc.getValue($category))
      #if ($value &amp;&amp; !$categories.contains($value))
       #set ($discard = $categories.add($value))
      #end
      #set ($docList = $categoriesDocs.get($value))
      #if (!$docList)
       #set ($docList = [])
       #set ($discard = $categoriesDocs.put($value, $docList))
      #end
      #set ($discard = $docList.add($currentdoc.prefixedFullName))
    #end
  #end
  #displayCategories($categories $categoriesDocs)
  #end
#end
{{/velocity}}</content>
</xwikidoc>
